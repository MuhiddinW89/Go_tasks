// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dict/dict.proto

package dict

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TranslateServiceClient is the client API for TranslateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslateServiceClient interface {
	Dictionary(ctx context.Context, in *DictionaryRequest, opts ...grpc.CallOption) (*DictionaryResponse, error)
	CreateDictionary(ctx context.Context, in *CreateDictionaryRequest, opts ...grpc.CallOption) (*CreateDictionaryResponse, error)
	GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryResponse, error)
	SumArr(ctx context.Context, in *SumArrRequest, opts ...grpc.CallOption) (*SumArrResponse, error)
	Currency(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error)
	Max(ctx context.Context, in *MaxRequest, opts ...grpc.CallOption) (*MaxResponse, error)
	Pdf(ctx context.Context, in *PdfReq, opts ...grpc.CallOption) (*PdfRes, error)
}

type translateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslateServiceClient(cc grpc.ClientConnInterface) TranslateServiceClient {
	return &translateServiceClient{cc}
}

func (c *translateServiceClient) Dictionary(ctx context.Context, in *DictionaryRequest, opts ...grpc.CallOption) (*DictionaryResponse, error) {
	out := new(DictionaryResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/Dictionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) CreateDictionary(ctx context.Context, in *CreateDictionaryRequest, opts ...grpc.CallOption) (*CreateDictionaryResponse, error) {
	out := new(CreateDictionaryResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/CreateDictionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryResponse, error) {
	out := new(GetDictionaryResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/GetDictionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) SumArr(ctx context.Context, in *SumArrRequest, opts ...grpc.CallOption) (*SumArrResponse, error) {
	out := new(SumArrResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/SumArr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) Currency(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*CurrencyResponse, error) {
	out := new(CurrencyResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/Currency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) Max(ctx context.Context, in *MaxRequest, opts ...grpc.CallOption) (*MaxResponse, error) {
	out := new(MaxResponse)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/Max", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translateServiceClient) Pdf(ctx context.Context, in *PdfReq, opts ...grpc.CallOption) (*PdfRes, error) {
	out := new(PdfRes)
	err := c.cc.Invoke(ctx, "/dict.TranslateService/Pdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslateServiceServer is the server API for TranslateService service.
// All implementations must embed UnimplementedTranslateServiceServer
// for forward compatibility
type TranslateServiceServer interface {
	Dictionary(context.Context, *DictionaryRequest) (*DictionaryResponse, error)
	CreateDictionary(context.Context, *CreateDictionaryRequest) (*CreateDictionaryResponse, error)
	GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryResponse, error)
	SumArr(context.Context, *SumArrRequest) (*SumArrResponse, error)
	Currency(context.Context, *CurrencyRequest) (*CurrencyResponse, error)
	Max(context.Context, *MaxRequest) (*MaxResponse, error)
	Pdf(context.Context, *PdfReq) (*PdfRes, error)
	mustEmbedUnimplementedTranslateServiceServer()
}

// UnimplementedTranslateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranslateServiceServer struct {
}

func (UnimplementedTranslateServiceServer) Dictionary(context.Context, *DictionaryRequest) (*DictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dictionary not implemented")
}
func (UnimplementedTranslateServiceServer) CreateDictionary(context.Context, *CreateDictionaryRequest) (*CreateDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionary not implemented")
}
func (UnimplementedTranslateServiceServer) GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionary not implemented")
}
func (UnimplementedTranslateServiceServer) SumArr(context.Context, *SumArrRequest) (*SumArrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumArr not implemented")
}
func (UnimplementedTranslateServiceServer) Currency(context.Context, *CurrencyRequest) (*CurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Currency not implemented")
}
func (UnimplementedTranslateServiceServer) Max(context.Context, *MaxRequest) (*MaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Max not implemented")
}
func (UnimplementedTranslateServiceServer) Pdf(context.Context, *PdfReq) (*PdfRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pdf not implemented")
}
func (UnimplementedTranslateServiceServer) mustEmbedUnimplementedTranslateServiceServer() {}

// UnsafeTranslateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslateServiceServer will
// result in compilation errors.
type UnsafeTranslateServiceServer interface {
	mustEmbedUnimplementedTranslateServiceServer()
}

func RegisterTranslateServiceServer(s grpc.ServiceRegistrar, srv TranslateServiceServer) {
	s.RegisterService(&TranslateService_ServiceDesc, srv)
}

func _TranslateService_Dictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).Dictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/Dictionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).Dictionary(ctx, req.(*DictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_CreateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).CreateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/CreateDictionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).CreateDictionary(ctx, req.(*CreateDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_GetDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).GetDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/GetDictionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).GetDictionary(ctx, req.(*GetDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_SumArr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumArrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).SumArr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/SumArr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).SumArr(ctx, req.(*SumArrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_Currency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).Currency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/Currency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).Currency(ctx, req.(*CurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_Max_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).Max(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/Max",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).Max(ctx, req.(*MaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslateService_Pdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PdfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslateServiceServer).Pdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dict.TranslateService/Pdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslateServiceServer).Pdf(ctx, req.(*PdfReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TranslateService_ServiceDesc is the grpc.ServiceDesc for TranslateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranslateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dict.TranslateService",
	HandlerType: (*TranslateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dictionary",
			Handler:    _TranslateService_Dictionary_Handler,
		},
		{
			MethodName: "CreateDictionary",
			Handler:    _TranslateService_CreateDictionary_Handler,
		},
		{
			MethodName: "GetDictionary",
			Handler:    _TranslateService_GetDictionary_Handler,
		},
		{
			MethodName: "SumArr",
			Handler:    _TranslateService_SumArr_Handler,
		},
		{
			MethodName: "Currency",
			Handler:    _TranslateService_Currency_Handler,
		},
		{
			MethodName: "Max",
			Handler:    _TranslateService_Max_Handler,
		},
		{
			MethodName: "Pdf",
			Handler:    _TranslateService_Pdf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dict/dict.proto",
}
